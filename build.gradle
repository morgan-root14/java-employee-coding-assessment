plugins {
    id 'org.springframework.boot' version '3.3.1'
    id 'io.spring.dependency-management' version '1.1.5'
    id 'java'
    id 'jacoco'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

repositories {
    mavenCentral()
}

dependencies {
    implementation group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-logging'
    implementation 'javax.inject:javax.inject:1'
    implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.1.2'
    implementation group: 'io.github.openfeign', name: 'feign-jackson', version: '13.3'
    implementation group: 'org.slf4j', name: 'slf4j-api', version: '2.1.0-alpha1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.23.1'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    finalizedBy jacocoTestReport, jacocoTestCoverageVerification // report is always generated after tests run
    useJUnitPlatform()
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/RqChallengeApplication**',
                    '**/model/**',
                    '**/config/**',
                    '**/exception/**'
            ])
        }))
    }// tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    afterEvaluate {
        getClassDirectories().setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    '**/RqChallengeApplication**',
                    '**/model/**',
                    '**/config/**',
                    '**/exception/**'
            ])
        }))
    }
    violationRules {
        rule {
            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                minimum = 1.0
            }
        }
    }
}
